-> Python is an interpreted(quick i.e. no compilation step),
functional and object oriented high level language.
-> It has a simple syntax and it can be deployed fast as it contains several Fast-inbuilt libraries.
-> Why to use Python?
    Because it is easy to learn/use, performance is high, rapid development, dynamically types
    i.e, we do not need to specify the data type (it will decide automatically in the run time),
    community is huge and python can easily integrate with third party libraries i.e, CherryPy, 
    boto etc. (A complete list can be found at pythonanywhere.com/batteries_included).

-> Instead of {} for a block of code in other programming languages, we use indentation.
-> Indentation is nothing but leaving a specific amount of spaces or a tab space while
    grouping a blocl of code.
    For example:
        x = int(input("Enter min number"))
        y = int(input("Enter max number"))
        i = x
        if i%2 == 0: i=x+1
        while i<=y:
            print(i) #Indentation
            i += 2  #Indentation
    * General convention is to use 4 spaces. The number of spaces should be same throughout the
    project.

-> When we work in real time applications we also need to hold on to multiple values or a sequence
    of values at a time which could be coming from a database table or from a restful
    webservice call or from some other source.
    For that, we use collections: List, Set and Dictionary.
    List:
    The list can store any number of values or objects dynamically and it maintains their order.
    Set: 
    It doesn't allow duplicates. The set and list have a lot of methods to deal with the CRUD of
    the elements.
    Dictionary:
    It's a map. It's used to store keys and values and has separate methods for that.

-> Tuple Sequence Type is just like a list, but it can never be modified. We create a tuple 
    using the normal parenthesis. We can not use the methods like:
    append(), extend(), insert(), remove() and clear()

-> Set Sequence Type does not allow duplicates. And it does not guarantee any order.
-> In python, to find the exponents, we use ** operator. It means that if we write a**b, it will
    calculate a^b.
    // is also a special operator which is also known as integer division operator, also known as
    floor division. It performs the division and returns the integer quotient.

-> FOR SWAPPING TWO VARIABLE WITHOUT USING ANY VARIABLE IN PYTHON:
    a,b = 10, 5
    print(a,b)
    a,b = b,a
    print(a,b)

-> Flow Control and Statements:
1. Control Statements: if.
2. Conditional Statements: if ... else, if ... elif ... else (Else if Ladder).
3. Looping: while, for
4. Transfer: It allows us to transfer the control of our program from one place to another starting
    with
    -> break
    -> continue
    -> pass
    -> return.

IF: if(conditions: statements)
IF ELSE:
    if(conditions: statements)
    else: statements

WHILE Statement:
while condition:
    statements

A for loop is typically used to iterate over the elements of a sequence like: string, list, tuple, set,
    range, etc.
    SYNTAX:
    for var in sequence:
        statements
    This will go on until the last element is reached.


-> The command line arguments are those arguments that are passed whenever a python program is run.
SYNTAX: python myProgram.py 123 abc xy
We can pass anything i.e, file location or a connection URL can be passed as an argument.
All these values are passed in our python program through a list called argv. And, this list is
inside the sys module. So, to access the elements, we can use sys.argv.

A function is a group of statments which perform a particular task.
-> We can declare user defined functions to execute a particular task according to the user definition.
-> processData(data)
ADVANTAGES:
    1. Reusability: Once we define a functions and statements inside it, then those statements need not be
    be written anywhere in the program again. We can use function to perform a task again and again.
    2. Modularity: We can use multiple functions instead of writing all the code at once, which for us as
    a developer, will keep the code modular.
    3. Maintenance: We can easily find the error/bug at a particular function in the program.

RECURSION: It's the process of function calling itself. Example: Finding out the factorial of a given number.
The very first step of writing a recursive function is to define an end condition in case of factorial.
Recursion will not be a good option for everything. Use caution while applying the recursion.

LAMBDAS:
A lambda is an anonymous function that will not have any name when we define a function in python.
From:
def square(x):
    return x*x
To:
lambda x:x*x
Syntax: lambda argument_list: expression
Lambda will always return a function back.
To call a lambda function:
    f = lambda x*x*x
    restult = f(10)
Lambda functions are really helpful when we use them inside the other functions.

Decorators itself says that it's a function that performs additional logic on a given function.
It also returns the function back as a result. So, it takes a function and returns a function.
Inside the Decorator, there's a logic that will invoke the input function, take the result and perform
the additional logic or processing on it.

Generators are the function that returns the sequence of values back. Generator function is returned
just like any other function, but it uses a yield statment. So, we will store each value in the sequence
and at the end of the sequence generation, we will return the entire sequence back, similar to range.

List Comprehensions gives us an easy to use syntax to create one list out of another while applying some
logic and conditions.
Syntax: (lambda function or lambda expression )I = [expression for item in iterable if condition]
So, list comprehensions are a shortcut to map and reduced functions.

Three 3 important thing that an object has are:
1. Identity/name
2. Properties/Variables
3. Functionality/Behavior
The objects communicate to each other using their functionality which is nothing but methods or
functions in programming languages. And when they do the communication, they exchange some information
via property or variables.

The 4 principles of Object Oriented Programming are:
1. Encapsulation
2. Inheritance
3. Abstraction
4. Polymorphism

Classes and Objects: Classes allow us to create our own data types that is user defined data types.
They act as a blueprint for our objects.
Example:
class Product:
    id name price
Now we can create any number of objects for this class and all of them will have the same properties,
but with different values.